openapi: 3.0.3
info:
  title: HEI Corrector API
  version: 1.0.0
servers:
  - url: 'https://hei-corrector.onrender.com'
paths:

  /sessions:
    get:
      tags:
        - Session
      summary: get a list of sessions
      operationId: getSessions
      parameters:
        - name: page
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: return a list of sessions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    put:
      tags:
        - Session
      summary: update sessions if id are provided, create them otherwise.
      operationId: crupdateSessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Session'
      responses:
        '200':
          description: List of crupdated sessions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /sessions/{id}:
    get:
      tags:
        - Session
      summary: get a session by its identifier
      operationId: getSessionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The specified session.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
    delete:
      tags:
        - Session
      summary: delete a session by its identifier
      operationId: removeSession
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: session removed successfully !
          content:
            text/plain:
              schema:
                type: string
                example: Session.20230612 removed successfully !
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'

  /sessions/{id}/test:
    get:
      tags:
        - Session
      operationId: runSessionTest
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return response path.
          content:
            text/plain:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'


components:
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
    '503':
      description: Service unavailable, the server is not ready to handle the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceUnavailableException'

  schemas:
    SessionType:
      type: string
      enum:
        - EXAM
        - TEST
        - TUTORIAL

    Session:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        associated_course:
          type: string
        date:
          type: string
          format: date-time
        type:
          $ref: '#/components/schemas/SessionType'
        source:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/TestResult'

    TestResult:
      type: object
      properties:
        id:
          type: string
        student_ref:
          type: string
        score:
          type: integer
        tests:
          type: array
          items:
            $ref: '#/components/schemas/TestInfo'

    TestInfo:
      type: object
      properties:
        id:
          type: string
        kata:
          type: string
        total_points:
          type: integer
        passed:
          type: integer
        failed:
          type: integer

    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`

    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
    ServiceUnavailableException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ServiceUnavailableException
        message: Service unavailable
